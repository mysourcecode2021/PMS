@{
    ViewData["Title"] = "Salary Employee";
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Salary Employee</h3>
        <div class="card-tools col-md-10">
            <div class="input-group">
                <input type="text" class="form-control dpMonth" id="Periode" />
                @*<select class="custom-select" id="PeriodeYear">
                    <option value="">--Year--</option>
                    @foreach (var r in (List<dynamic>)ViewData["YEAR"]!)
                    {
                        <option value="@r.SystemCode">@r.SystemValue</option>
                    }
                </select>
                <select class="custom-select" id="PeriodeMonth">
                    <option value="">--Month--</option>
                    <option value="01">January</option>
                    <option value="02">February</option>
                    <option value="03">March</option>
                    <option value="04">April</option>
                    <option value="05">May</option>
                    <option value="06">June</option>
                    <option value="07">July</option>
                    <option value="08">August</option>
                    <option value="08">September</option>
                    <option value="10">October</option>
                    <option value="11">November</option>
                    <option value="12">December</option>
                </select>*@
                <div class="input-group-append">
                    &nbsp;
                    <button class="btn btn-outline-primary" type="button" id="btnGenerate">Generate Payment</button>
                    &nbsp;
                    <button class="btn btn-primary btn-sm" type="button" id="btnSearch">
                        <i class="fas fa-search">
                        </i>
                        Search
                    </button>
                    &nbsp;
                    <button class="btn btn-danger btn-sm" type="button" id="btnClear">
                        <i class="fas fa-eraser">
                        </i>
                        Clear
                    </button>
                    &nbsp;
                    <button class="btn btn-secondary btn-sm" type="button" id="btnExport" disabled>
                        <i class="fas fa-file-export">
                        </i>
                        Export Data
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row table-responsive" id="_content">
        </div>
    </div>
</div>

<div class="modal fade" id="_modal-detail" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Detail Payment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table table-head-fixed text-nowrap table-striped">
                    <thead>
                        <tr>
                            <th>NIK</th>
                            <th>Name</th>
                            <th>Periode</th>
                        </tr>
                        <tr>
                            <td><label id="lblNIK"></label></td>
                            <td><label id="lblName"></label></td>
                            <td><label id="lblPeriode"></label></td>
                        </tr>
                        <tr>
                            <th>Total Work Day</th>
                            <th>Total OT</th>
                        </tr>
                        <tr>
                            <td><label id="lblTotalWorkDay"></label></td>
                            <td><label id="lblTotalOT"></label></td>
                        </tr>
                    </thead>
                </table>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <table id="_gridPaymentIncome" class="table table-head-fixed text-nowrap table-striped">
                                <thead>
                                    <tr>
                                        <th>Component</th>
                                        <th>Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td>Total Income</td>
                                        <td><label id="lblTotalIncome"></label></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table id="_gridPaymentDeduction" class="table table-head-fixed text-nowrap table-striped">
                                <thead>
                                    <tr>
                                        <th>Component</th>
                                        <th>Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td>Total Deduction</td>
                                        <td><label id="lblTotalDeduction"></label></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <label id="lblTakeHomePay"></label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {
        $("#btnSearch").click(function () {
            if ($("#Periode").val() == "") {
                toastr.error("Periode must be fill");
                return;
            }

            getData(1);
        });

        $("#btnClear").click(function () {
            $("._searchCriteria").val("");
            getData(1, "Clear");
        });

        $("#btnExport").click(function () {
            var param = {};
            var pValue = "";
            $("._searchCriteria").each(function (i, obj) {
                pValue += this.value + ";";
            });
            param["Param"] = pValue;
            param["ParamHeader"] = "Monthly;" + $("#Periode").val();
            param["Type"] = "Export";

            $.ajax({
                type: "POST",
                url: "/Generate/ExportExcel",
                data: JSON.stringify(param),
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.btn').prop('disabled', true);
                },
                complete: function () {
                    $('.btn').prop('disabled', false);
                },
                success: function (result) {
                    var bytes = base64ToBytes(result);
                    var blob = new Blob([bytes], { type: "application/octetstream" });

                    var date = new Date();
                    var dateStr =
                        ("00" + (date.getMonth() + 1)).slice(-2) +
                        ("00" + date.getDate()).slice(-2) +
                        date.getFullYear() +
                        ("00" + date.getHours()).slice(-2) +
                        ("00" + date.getMinutes()).slice(-2) +
                        ("00" + date.getSeconds()).slice(-2);
                    var filename = "Data_" + dateStr + ".xlsx";

                    var isIE = false || !!document.documentMode;
                    if (isIE) {
                        window.navigator.msSaveBlob(blob, filename);
                    } else {
                        var url = window.URL || window.webkitURL;
                        var link = url.createObjectURL(blob);
                        var a = $("<a />");
                        a.attr("download", filename);
                        a.attr("href", link);
                        $("body").append(a);
                        a[0].click();
                        $("body").remove(a);
                    }
                },
                error: function (result) {
                    toastr.error(result.responseText);
                }
            });
        });

        $("#btnGenerate").click(function () {
            if ($("#Periode").val() == "") {
                toastr.error("Periode must be fill");
                return;
            }

            Swal.fire({
                title: "Are you sure?",
                text: "This data will be processed!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, do it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    var param = {};
                    param["Type"] = "Monthly";
                    param["Periode"] = $("#Periode").val().toString();
                    param["Act"] = "Generate";

                    $.ajax({
                        type: "POST",
                        url: "/Generate/GenerateSlip",
                        data: JSON.stringify(param),
                        contentType: "application/json; charset=utf-8",
                        beforeSend: function () {
                            $('.btn').prop('disabled', true);
                        },
                        complete: function () {
                            $('.btn').prop('disabled', false);
                        },
                        success: function (result) {
                            if (result == "Success") {
                                toastr.success("Data has been processed successfully");
                                getData(1);
                            } else {
                                if (result.indexOf("has been generated") > 0) {
                                    Swal.fire({
                                        title: "Are you sure to Re-Generate?",
                                        text: result,
                                        icon: "warning",
                                        showCancelButton: true,
                                        confirmButtonColor: '#3085d6',
                                        cancelButtonColor: '#d33',
                                        confirmButtonText: 'Yes, do it!'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            param = {};
                                            param["Type"] = "Monthly";
                                            param["Periode"] = $("#Periode").val().toString();
                                            param["Act"] = "Re-Generate";

                                            $.ajax({
                                                type: "POST",
                                                url: "/Generate/GenerateSlip",
                                                data: JSON.stringify(param),
                                                contentType: "application/json; charset=utf-8",
                                                beforeSend: function () {
                                                    $('.btn').prop('disabled', true);
                                                },
                                                complete: function () {
                                                    $('.btn').prop('disabled', false);
                                                },
                                                success: function (result) {
                                                    if (result == "Success") {
                                                        toastr.success("Data has been processed successfully");
                                                        getData(1);
                                                    } else {
                                                        toastr.error(result);
                                                    }
                                                },
                                                error: function (result) {
                                                    toastr.error(result.responseText);
                                                }
                                            });
                                        }
                                    });
                                } else {
                                    toastr.error(result);
                                }
                            }
                        },
                        error: function (result) {
                            toastr.error(result.responseText);
                        }
                    });
                }
            });
        });

        $(document).on('click', '#btnDetail', function (e) {
            var field = $(this).attr("data-value").split("|");
            $("#lblNIK").text(field[0]);
            $("#lblName").text(field[1]);
            $("#lblPeriode").text(field[2]);
            $("#lblTotalWorkDay").text(field[3]);
            $("#lblTotalOT").text(field[4]);

            var param = {};
            param["Param"] = field[5];
            param["Type"] = "GetDetailPayment";

            $.ajax({
                type: "POST",
                url: "/Generate/GetDataByKey",
                data: JSON.stringify(param),
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.btn').prop('disabled', true);
                },
                complete: function () {
                    $('.btn').prop('disabled', false);
                },
                success: function (result) {
                    if (result.length > 0) {
                        var htmlIncome = "";
                        var htmlDeduction = "";
                        $("#_gridPaymentIncome tbody").empty();
                        $("#_gridPaymentDeduction tbody").empty();
                        var totalIncome = 0;
                        var totalDeduction = 0;
                        for (var x = 0; x < result.length; x++) {
                            if (result[x].Category == "Income") {
                                htmlIncome += "<tr><td>" + result[x].Component + "</td><td>" + formatCurrency(result[x].Amount) + "</td></tr>"
                                totalIncome = totalIncome + parseFloat(result[x].Amount);
                            } else if (result[x].Category == "Deduction") {
                                htmlDeduction += "<tr><td>" + result[x].Component + "</td><td>" + formatCurrency(result[x].Amount) + "</td></tr>"
                                if (result[x].Component != "Income Tax (BIK)") {
                                    totalDeduction = totalDeduction + parseFloat(result[x].Amount);
                                }
                            }
                        }
                        $("#_gridPaymentIncome tbody").append(htmlIncome);
                        $("#_gridPaymentDeduction tbody").append(htmlDeduction);
                        $("#lblTotalIncome").text(formatCurrency(totalIncome.toFixed(2)));
                        $("#lblTotalDeduction").text(formatCurrency(totalDeduction.toFixed(2)));
                        $("#lblTakeHomePay").text("Total Take Home Pay : " + formatCurrency((parseFloat(totalIncome) - parseFloat(totalDeduction)).toFixed(2)));
                    }

                    $("#_modal-detail").modal("show");
                },
                error: function (result) {
                    toastr.error(result.responseText);
                }
            });
        });
    });

    getData = function (page = 1, act = "") {
        var param = {};
        var pValue = "";
        $("._searchCriteria").each(function (i, obj) {
            pValue += this.value + ";";
        });
        param["Param"] = (act == "Clear") ? "-1" : pValue;
        param["ParamHeader"] = "Monthly;" + $("#Periode").val();
        param["PageNumber"] = page;
        param["RowsOfPage"] = ($(".pageSize").val() == undefined) ? 10 : $(".pageSize").val();

        $.ajax({
            type: "POST",
            url: "/Generate/GetData",
            data: JSON.stringify(param),
            contentType: "application/json; charset=utf-8",
            beforeSend: function () {
                $('.btn').prop('disabled', true);
            },
            complete: function () {
                $('.btn').prop('disabled', false);
            },
            success: function (result) {
                $("#_content").html(result);

                if (act == "") {
                    var parValue = param.Param.split(";");
                    var seq = 0;
                    $("._searchCriteria").each(function (i, obj) {
                        $(obj).val(parValue[seq]);
                        seq++;
                    });
                }
            },
            error: function (result) {
                toastr.error(result.responseText);
            }
        });
    }

    base64ToBytes = function (base64) {
        var binary_string = window.atob(base64);
        var len = binary_string.length;
        var bytes = new Uint8Array(len);
        for (var i = 0; i < len; i++) {
            bytes[i] = binary_string.charCodeAt(i);
        }
        return bytes.buffer;
    }

    searchFilter = function (e) {
        if (e.keyCode === 13) {
            getData(1);
        }
    }

    const formatCurrency = (number, symbol = 'Rp.') => {
        // Add thousands separator
        const formattedNumber = number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');

        // Format the number as a currency string
        return `${symbol}${formattedNumber}`;
    };
</script>